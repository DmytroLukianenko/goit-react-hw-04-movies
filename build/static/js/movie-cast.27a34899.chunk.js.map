{"version":3,"sources":["components/MovieCast/MovieCast.module.css","components/MovieCast/MovieCast.js"],"names":["module","exports","MovieCast","id","useQuery","a","moviesAPI","getMovieCast","data","cast","length","Error","console","log","retry","isLoading","isError","isSuccess","error","className","s","wrapper","list","map","actor","item","image","src","profile_path","broken","alt","name","character","cast_id","style","fontFamily","message"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,QAAU,2BAA2B,KAAO,wBAAwB,KAAO,wBAAwB,MAAQ,yBAAyB,KAAO,wBAAwB,UAAY,+B,2KCOlL,SAASC,EAAT,GAA4B,IAAPC,EAAM,EAANA,GAAM,EACiBC,YACnD,CAAC,YAAaD,GAD6C,sBAE3D,4BAAAE,EAAA,sEACuBC,IAAUC,aAAaJ,GAD9C,UAE6B,KADnBK,EADV,QAEaC,KAAKC,OAFlB,sBAGc,IAAIC,MAAM,8BAHxB,cAKIC,QAAQC,IAAIL,EAAKC,MALrB,kBAMWD,GANX,2CAQA,CACIM,OAAO,IAXPC,EAD8B,EAC9BA,UAAWC,EADmB,EACnBA,QAASC,EADU,EACVA,UAAWT,EADD,EACCA,KAAMU,EADP,EACOA,MAe7C,OACI,qCACKH,GAAa,cAAC,IAAD,IACbE,GACG,qBAAKE,UAAWC,IAAEC,QAAlB,SACI,oBAAIF,UAAWC,IAAEE,KAAjB,SACKd,EAAKC,KAAKc,KAAI,SAAAC,GACX,OACI,qBAAIL,UAAWC,IAAEK,KAAjB,UACI,qBACIN,UAAWC,IAAEM,MACbC,IACIH,EAAMI,aAAN,yCACwCJ,EAAMI,cACxCC,IAEVC,IAAKN,EAAMO,OAEf,mBAAGZ,UAAWC,IAAEW,KAAhB,SAAuBP,EAAMO,OAC7B,oBAAGZ,UAAWC,IAAEY,UAAhB,wBACgBR,EAAMQ,UAAYR,EAAMQ,UAAY,eAZ5BR,EAAMS,gBAoBrDjB,GACG,mBAAGkB,MAAO,CAAEC,WAAY,sBAAxB,SAAiDjB,EAAMkB","file":"static/js/movie-cast.27a34899.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MovieCast_wrapper__2dU2P\",\"list\":\"MovieCast_list__2ftTA\",\"item\":\"MovieCast_item__22KOR\",\"image\":\"MovieCast_image__3VEAI\",\"name\":\"MovieCast_name__dTUp4\",\"character\":\"MovieCast_character__MWWvJ\"};","import React from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport PropTypes from 'prop-types';\r\nimport moviesAPI from '../../Services/movie-api';\r\nimport { Loader } from '../Loader/Loader';\r\nimport s from './MovieCast.module.css';\r\nimport broken from '../../images/broken.png';\r\n\r\nexport default function MovieCast({ id }) {\r\n    const { isLoading, isError, isSuccess, data, error } = useQuery(\r\n        ['movieCast', id],\r\n        async () => {\r\n            const data = await moviesAPI.getMovieCast(id);\r\n            if (data.cast.length === 0) {\r\n                throw new Error('Cast data is not available');\r\n            }\r\n            console.log(data.cast);\r\n            return data;\r\n        },\r\n        {\r\n            retry: false,\r\n        },\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <Loader />}\r\n            {isSuccess && (\r\n                <div className={s.wrapper}>\r\n                    <ul className={s.list}>\r\n                        {data.cast.map(actor => {\r\n                            return (\r\n                                <li className={s.item} key={actor.cast_id}>\r\n                                    <img\r\n                                        className={s.image}\r\n                                        src={\r\n                                            actor.profile_path\r\n                                                ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\r\n                                                : broken\r\n                                        }\r\n                                        alt={actor.name}\r\n                                    />\r\n                                    <p className={s.name}>{actor.name}</p>\r\n                                    <p className={s.character}>\r\n                                        Character: {actor.character ? actor.character : 'unknown'}\r\n                                    </p>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n            {isError && (\r\n                <p style={{ fontFamily: 'Roboto, sans-serif' }}>{error.message}</p>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nMovieCast.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};"],"sourceRoot":""}